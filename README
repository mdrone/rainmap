# This is a fork from http://nmap.org/rainmap/ to make it work with new django versions
# please see the Update section

Rainmap is a web-based application that allows users to create, configure and
run Nmap scans from within their browser. Almost the entire range of Nmap
options is available, but users only need to specify the targets they want scanned, and the default options will be adequate in most cases.

For the most up-to-date information please visit http://nmap.org/rainmap/

Detailed installation instructions are in `docs/INSTALL`

Please make note of the COPYING terms, which include license information on
what you can do with Rainmap.

(c) 2010 The Nmap Project, http://nmap.org

################################################################################
Update 2014 12 25:

    Before you read any further: 
    I'm not very experienced in programming in general (and django specifically) and haven't really digged into the code - just tried to make it work somehow.
    My aim was to make this django-app work with a recent django version
    therefore i changed some imports the filestructure and the templates.
    I only tried to make it run under the development-server, therefore I tried to reduce the Settings (mainly celery)
    to a minimum to get it work.

    I could successfully scan a host (with non-root privileges [like: -Pn -p 80 HOST]) and view the text and grepable outputs - thats actually all I tested.
    The html-view somehow isn't even generated.
    From what I tried/tested there are no import errors and you can create scans and run them.

# Installation:
    The Makefile should do the rabbitmq install and start the server

* I recommend to set up a Virtualenvironment: (I assume the workingdir is the projectfolder)
    virtualenv-2.7 venv
    source venv/bin/activate
    pip install -r requirements.txt

* after setting up the virtual env you can do the database migration:
    source venv/bin/activate
    ./manage.py syncdb

* to create a superuser for the admin-backend:
    ./manage.py createsuperuser

* if the rabbit-server is still running you should be ready to go: (i used supervisor to start the celery worker [see: supervisor.conf])
    source venv/bin/activate
    ./manage.py supervisor



# A short "changelog":
    -------------------
    * File structure:
        all "core"-names to "rainmap"
        at first i created a django project with the name rainmap
        /rainmap
        removed subdirectory core and added an django-app in the apps-folder
        /apps/rainmap
        tasks moved to
        /apps/rainmap/tasks.py
        and the Nmap-Option-Parser to
        /apps/rainmap/nmaplib/

    now if you want to include the app to an existing django project you only need to check the settings from /rainmap/settings.py
    and move the apps folder in your project-root
    or you could just use this project folder

    * Template changes:
        {% url %} -tags are now 1.6 compatible (from {% url url_name arg %} to {% url 'url_name' arg=arg %})
        included staticfiles loader (in the settings STATIC_ROOT + STATIC_URL)
    
    * apps/rainmap/tasks.py
        import celery.utils
        changed celery.log.LoggingProxy to celery.utils.log.LoggingProxy

    adjusted imports-lines (due to the new filestructure) in model.py, views.py, forms.py ...

    * model.py changes:
        added default=False to finished_ok (due to db constraint while saving in views.py+176 [result.save()])
        [finished_ok = models.BooleanField(default=False)]

    1.6 compatible manage.py + wsgi.py (gets autogenerated if you start a new project)

    moved staticfiles from public to static

    changed DB-Settings in /rainmap/settings.py to use sqlite (easier for local testing)

################################################################################
